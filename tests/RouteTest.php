<?php

require_once dirname(__FILE__) . '/../src/Route.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-20 at 21:30:57.
 */
class RouteTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Route
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Route;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Route::setDelimiter
     * @covers Route::getDelimiter
     */
    public function testSetGetDelimiter()
    {
        $this->object->setDelimiter("-");
        $this->assertEquals("-", $this->object->getDelimiter());
    }

    /**
     * @covers Route::explode
     * @todo   Implement testExplode().
     */
    public function testSlashExplode()
    {
        $this->object->setDelimiter("/");
        $routeObj = $this->object->explode("/");
        
        $route = $routeObj->getRoute();
        $params = $routeObj->getParams();
        
        $this->assertEquals("index", $route["controller"]);
        $this->assertEquals("index", $route["action"]);
        
        $this->assertInternalType("array", $params);
        $this->assertSame(0, count($params));
    }
    
    public function testOnlyActionExplode()
    {
        $this->object->setDelimiter("/");
        $routeObj = $this->object->explode("/home");
        
        $route = $routeObj->getRoute();
        $params = $routeObj->getParams();
        
        $this->assertEquals("index", $route["controller"]);
        $this->assertEquals("home", $route["action"]);
        
        $this->assertInternalType("array", $params);
        $this->assertSame(0, count($params));
    }
    
    public function testControllerActionExplode()
    {
        $this->object->setDelimiter("/");
        $routeObj = $this->object->explode("/admin/home");
        
        $route = $routeObj->getRoute();
        $params = $routeObj->getParams();
        
        $this->assertEquals("admin", $route["controller"]);
        $this->assertEquals("home", $route["action"]);
        
        $this->assertInternalType("array", $params);
        $this->assertSame(0, count($params));
    }
    
    public function testParamsControllerActionExplode()
    {
        $this->object->setDelimiter("/");
        $routeObj = $this->object->explode("/walk/on/area/bar/status/inlove");
        
        $route = $routeObj->getRoute();
        $params = $routeObj->getParams();
        
        $this->assertEquals("walk", $route["controller"]);
        $this->assertEquals("on", $route["action"]);
        
        $this->assertInternalType("array", $params);
        $this->assertSame(2, count($params));
        
        $keys = array_keys($params);
        $this->assertEquals("area", $keys[0]);
        $this->assertEquals("status", $keys[1]);
        
        $this->assertEquals("bar", $params["area"]);
        $this->assertEquals("inlove", $params["status"]);
    }
    
    public function testUnbalancedParamsExplode()
    {
        $this->object->setDelimiter("/");
        $routeObj = $this->object->explode("/walk/on/area/bar/status");
        
        $route = $routeObj->getRoute();
        $params = $routeObj->getParams();
        
        $this->assertEquals("walk", $route["controller"]);
        $this->assertEquals("on", $route["action"]);
        
        $this->assertInternalType("array", $params);
        $this->assertSame(1, count($params));
        
        $keys = array_keys($params);
        $this->assertEquals("area", $keys[0]);
        
        $this->assertEquals("bar", $params["area"]);
    }
    
    public function testUsingDashSeperatorExplode()
    {
        $this->markTestSkipped("NEED FIX ON DELIMITER");
        
        $this->object->setDelimiter("-");
        $routeObj = $this->object->explode("/walk-on-area-bar-status-inlove");
    
        $route = $routeObj->getRoute();
        $params = $routeObj->getParams();
    
        $this->assertEquals("walk", $route["controller"]);
        $this->assertEquals("on", $route["action"]);
    
        $this->assertInternalType("array", $params);
        $this->assertSame(2, count($params));
    
        $keys = array_keys($params);
        $this->assertEquals("area", $keys[0]);
        $this->assertEquals("status", $keys[1]);
    
        $this->assertEquals("bar", $params["area"]);
        $this->assertEquals("inlove", $params["status"]);
        
    }
}
