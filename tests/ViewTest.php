<?php
require_once dirname(__FILE__) . '/../src/View.php';

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-06-20 at 19:36:01.
 */
class ViewTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var View
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new View;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers View::__set
     * @covers View::__get
     */
    public function testSetAndGet()
    {
        $this->object->string = "ok";
        $this->assertSame("ok", $this->object->string);
        
        $this->object->integer = 100;
        $this->assertSame(100, $this->object->integer);
        
        $arr = array();
        $arr["ciao"] = "hello";
        $this->object->arr = $arr;
        
        $this->assertInternalType("array", $this->object->arr);
        $this->assertEquals(1, count($this->object->arr));
        $this->assertEquals("hello", $this->object->arr["ciao"]);
        
        $this->assertSame($arr, $this->object->arr);
        
        $obj = new stdClass();
        $obj->value = "ciao";
        
        $this->object->obj = $obj;
        
        $this->assertInstanceOf("stdClass", $this->object->obj);
        $this->assertSame($obj, $this->object->obj);
    }

    /**
     * @covers View::setViewPath
     */
    public function testSetViewPath()
    {
        // Remove the following lines when you implement this test.
        $this->object->setViewPath(dirname(__FILE__));
        
        $this->assertEquals(dirname(__FILE__), $this->object->getViewPath());
    }
    
    /**
     * @expectedException RuntimeException
     */
    public function testSetInvalidViewPath()
    {
        $this->object->setViewPath(dirname(__FILE__) . '/ViewTest.php');
    }
    
    /**
     * @expectedException RuntimeException
     */
    public function testSetMissingViewPath()
    {
        $this->object->setViewPath(dirname(__FILE__) . '/hidden-views');
    }

    /**
     * @covers View::render
     */
    public function testRender()
    {
        $this->object->setViewPath(dirname(__FILE__) . '/views');
        $this->object->value = "ciao-mondo";
        $text = $this->object->render("view-test.phtml");
        
        $this->assertEquals("<p>ciao-mondo</p>", $text);
    }
    
    public function testMixData()
    {
        $this->object->setViewPath(dirname(__FILE__) . '/views');
        $this->object->value = "hello";
        $exec = $this->object->render("view-mix-test.phtml", array("value2" => 'hello'));
        
        $this->assertEquals("<p>hello</p><p>hello</p>", $exec);
    }

    /**
     * @expectedException RuntimeException
     */
    public function testMixNonArrayData()
    {
        $this->object->setViewPath(dirname(__FILE__) . '/views');
        $this->object->value = "hello";
        $exec = $this->object->render("view-test.phtml", 'hello');
    }
    
    /**
     * @expectedException RuntimeException
     */
    public function testMissingTemplate()
    {
        $exec = $this->object->render("missing-view-test.phtml");
    }
    
    public function testEmptyGet()
    {
        $false = $this->object->missingKey;
        
        $this->assertFalse($false);
    }
    
    public function testGetViewPath()
    {
        $this->object->setViewPath(dirname(__FILE__));
        
        $path = $this->object->getViewPath();
        
        $this->assertEquals(dirname(__FILE__), $path);
    }
    
    public function testViewParamEscape()
    {
        $ret = $this->object->escape("<p>ciao</p>");
        $this->assertEquals("&lt;p&gt;ciao&lt;/p&gt;", $ret);
    }
    
    public function testViewChars()
    {
        $ret = $this->object->p = "èàòùìç@";
        $this->assertEquals("èàòùìç@", $this->object->p);
        $this->assertEquals("èàòùìç@", $this->object->escape("èàòùìç@"));
        $this->assertEquals("&quot;", $this->object->escape("\"", ENT_QUOTES));
        $this->assertEquals("\"'", $this->object->escape("\"'", ENT_NOQUOTES));
    }
    
    public function testViewHelpers()
    {
        $this->object->addHelper("example", function(){
            return "walter";
        });
        
        $this->assertEquals("walter", $this->object->example());
    }
    
    public function testViewHelpersOneParam()
    {
        $this->object->addHelper("example", function($param){
            return "walter-{$param}";
        });
        
        $this->assertEquals("walter-stringa", $this->object->example("stringa"));
    }
    
    public function testViewHelpersMultipleParams()
    {
        $this->object->addHelper("example", function($param, $app, $def){
            return "walter-{$param}-{$def}-{$app}";
        });
        
        $this->assertEquals("walter-vg-#!-_9", $this->object->example("vg", "_9", "#!"));
    }
    
    public function testCloneView()
    {
        $v = new View();
        $v->setViewPath(__DIR__ . "/views");
        $v2 = $v->cloneThis();
        
        $this->assertNotSame($v, $v2);
        $v2->value = "hello";
        $this->assertEquals("<p>hello</p>", $v2->render("view-test.phtml"));
    }
    
    /**
     * @expectedException RuntimeException
     */
    public function testMissingHelperView()
    {
        $this->object->now();
    }
    
    public function testPull()
    {
        $v = new View();
        $v->controllerPath = __DIR__ . '/../../controllers';
        $pulled = $v->pull("/general/pull");
        
        $this->assertInternalType("array", $pulled);
        $this->assertEquals("ok", $pulled["title"]);
    }
}
